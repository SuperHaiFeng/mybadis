<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.ys.mapper.UserMapper2">
  <!-- 开启二级缓存 -->
  <!-- 开启本mapper的namespace下的二级缓存
    type:指定cache接口的实现类的类型，不写type属性，mybatis默认使用PerpetualCache
    要和ehcache整合，需要配置type为ehcache实现cache接口的类型
	-->
  <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
  	<!-- 根据 id 查询 user 表中的数据
       id:唯一标识符，此文件中的id值不能重复
       resultType:返回值类型，一条数据库记录也就对应实体类的一个对象
       parameterType:参数类型，也就是查询条件的类型
    -->
    <!-- select语句中可以使用 useCache="false" 来设置是否禁止二级缓存,默认是false -->
    <select id="selectUserById" resultType="User" parameterType="int">
    	select * from user where id=#{id}
    </select>
  
  	<update id="updateUserById" parameterType="User">
  		update user u
  		<trim prefix="set" suffixOverrides="," suffix="where id=#{id}">
	  		<if test="username != null and username != ''">
	  			u.username=#{username},
	  		</if>
	  		<if test="sex != null and sex != ''">
	  			u.sex=#{sex},
	  		</if>
	  		<if test="birthday != null">
	  			u.birthday=#{birthday},
	  		</if>
	  		<if test="address != null and address.length()>0">
	  			u.address=#{address},
	  		</if>
	  	</trim>
  	</update>
  	
  	<insert id="insertUser" parameterType="com.ys.po.User">
        <!-- 将插入的数据主键返回到 user 对象中
             keyProperty:将查询到的主键设置到parameterType 指定到对象的那个属性
             select LAST_INSERT_ID()：查询上一次执行insert 操作返回的主键id值，只适用于自增主键
             resultType:指定 select LAST_INSERT_ID() 的结果类型
             order:AFTER，相对于 select LAST_INSERT_ID()操作的顺序
         -->
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user(username,sex,birthday,address)
            value(#{username},#{sex},#{birthday},#{address})
    </insert>
  	
  	<delete id="deleteUserById" parameterType="int">
  		delete from user where id=#{id}
  	</delete>
  	
  	<!--
    方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集
                               封装联表查询的数据(去除重复的数据)
     select * from user u,orders o where u.id=o.user_id and u.id=#{id}
     -->
    <select id="selectUserAndOrdersByUserId" resultMap="getUserAndOrders">
    	select u.*,o.id oid,o.number number,o.user_id userId from user u,orders o where u.id=o.user_id and u.id=#{id}
    </select>
    
    <resultMap type="User" id="getUserAndOrders">
    	<!--id:指定查询列表唯一标识，如果有多个唯一标识，则配置多个id
            column:数据库对应的列
            property:实体类对应的属性名 -->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="birthday" property="birthday"/>
        <result column="address" property="address"/>
        
        <collection property="orders" ofType="Order">
        	<id column="oid" property="id"/>
        	<result column="number" property="number"/> 
        	<result column="userId" property="userId"/>
        	<!--association:用于映射关联查询单个对象的信息
	            property:实体类对应的属性名
	            javaType:实体类对应的全类名
          	-->
        	<association property="user" javaType="User">
	          	<!--
	                id:指定查询列表唯一标识，如果有多个唯一标识，则配置多个id
	                column:数据库对应的列
	                property:实体类对应的属性名
	              -->
              <id column="id" property="id"/>
              <result column="username" property="username"/>
              <result column="sex" property="sex"/>
              <result column="birthday" property="birthday"/>
              <result column="address" property="address"/>
          </association>
        </collection>
    </resultMap>
 
 	<select id="getUserByRoleId" resultMap="getUserMap">
 		select * from user_role ur, user u where ur.user_id=u.id and ur.role_id=#{id}
 	</select>
 	
 	<resultMap type="User" id="getUserMap">
 		<id column="user_id" property="id"/>
 		<result column="username" property="username"/>
 		<result column="sex" property="sex"/>
 	</resultMap>
 	
 	
  
  </mapper>